"""Add users table for authentication

Revision ID: 002_add_users_table
Revises: 001_initial_schema
Create Date: 2024-01-01 12:00:00.000000

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy import text


# revision identifiers, used by Alembic.
revision = '002_add_users_table'
down_revision = '001_initial_schema'
branch_labels = None
depends_on = None


def table_exists(table_name):
    """Check if table exists"""
    connection = op.get_bind()
    result = connection.execute(text(f"SELECT name FROM sqlite_master WHERE type='table' AND name='{table_name}'"))
    return result.fetchone() is not None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    if not table_exists('user'):
        op.create_table('user',
            sa.Column('id', sa.Integer(), nullable=False),
            sa.Column('username', sa.String(length=80), nullable=False),
            sa.Column('password_hash', sa.String(length=255), nullable=False),
            sa.Column('role', sa.Enum('ADMIN', 'EDITOR', 'VIEWER', name='userrole'), nullable=False),
            sa.Column('must_change_password', sa.Boolean(), nullable=False),
            sa.Column('last_login_at', sa.DateTime(), nullable=True),
            sa.Column('failed_login_count', sa.Integer(), nullable=True),
            sa.Column('locked_until', sa.DateTime(), nullable=True),
            sa.Column('created_at', sa.DateTime(), nullable=True),
            sa.Column('updated_at', sa.DateTime(), nullable=True),
            sa.PrimaryKeyConstraint('id'),
            sa.UniqueConstraint('username')
        )
        op.create_index(op.f('ix_user_username'), 'user', ['username'], unique=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_user_username'), table_name='user')
    op.drop_table('user')
    # ### end Alembic commands ###